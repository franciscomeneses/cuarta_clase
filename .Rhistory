set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 2),  # Grupo A
rnorm(50, mean = 60, sd = 2))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 6),  # Grupo A
rnorm(50, mean = 60, sd = 5))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 4),  # Grupo A
rnorm(50, mean = 60, sd = 5))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 4),  # Grupo A
rnorm(50, mean = 60, sd = 3))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
xaringan::infinite_moon_reader()
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 6),  # Grupo A
rnorm(50, mean = 60, sd = 3))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
xaringan::infinite_moon_reader()
library(shiny); runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
install.packages('rsconnect')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación del Teorema del Límite Central"),
sidebarLayout(
sidebarPanel(
selectInput("distribution", "Selecciona la distribución:",
choices = c("Normal" = "norm",
"Uniforme" = "unif",
"Exponencial" = "exp")),
numericInput("mean", "Media de la población:", value = 6000),
numericInput("sd", "Desviación estándar de la población:", value = 200, min = 0.1),
numericInput("n", "Tamaño de la muestra (n):", value = 30, min = 2),
numericInput("num_samples", "Número de muestras:", value = 1000, min = 1),
actionButton("generate", "Generar Muestras")
),
mainPanel(
h3("Distribución de la Variable Original"),
plotOutput("histOriginal"),
h3("Distribución del Promedio de las Muestras"),
plotOutput("histSampleMean"),
h3("Distribución de los Datos de Cada Muestra"),
plotOutput("histSampleDist"),
h3("Estadísticas de la Muestra"),
verbatimTextOutput("stats")
)
)
)
# Función reactiva para generar datos y muestras
data <- eventReactive(input$generate, {
set.seed(123)
n_total <- 100000  # Tamaño grande de la población
population <- switch(input$distribution,
"norm" = rnorm(n_total, mean = input$mean, sd = input$sd),
"unif" = runif(n_total, min = input$mean - input$sd * sqrt(3), max = input$mean + input$sd * sqrt(3)),
"exp" = rexp(n_total, rate = 1 / input$mean))
# Generar muestras y calcular sus estadísticas
samples <- replicate(input$num_samples, sample(population, input$n), simplify = FALSE)
sample_means <- sapply(samples, mean)
sample_sds <- sapply(samples, sd)
sample_ses <- sample_sds / sqrt(input$n)
ci_lower <- sample_means - 1.96 * sample_ses
ci_upper <- sample_means + 1.96 * sample_ses
# Convertir datos de muestras a formato largo para ggplot2 (hasta 9 muestras para visualización)
if (input$num_samples > 9) {
samples <- samples[1:9]
}
sample_data <- do.call(rbind, lapply(seq_along(samples), function(i) {
data.frame(Valor = samples[[i]],
Muestra = factor(i),
Promedio = sample_means[i],
CI_Lower = ci_lower[i],
CI_Upper = ci_upper[i])
}))
list(population = population,
sample_means = sample_means,
sample_sds = sample_sds,
ci_lower = ci_lower,
ci_upper = ci_upper,
sample_data = sample_data)
})
ci_upper
View(ui)
sample_means
runApp('app_tlc.R')
sample_means= 600
mean(sample_means)
sd(mean(sample_means))
runApp('app_tlc.R')
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
iris$Species
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
iris2 = iris %>% filter(Species!="versicolor ")
iris2
t.test(Petal.Width ~ Species, data = iris2, var.equal = TRUE)
iris2
iris2$Species
iris2$Species %>% table()
iris2 = iris %>% filter(Species!="versicolor ")
iris2$Species %>% table()
iris2 = iris %>% filter(Species!="versicolor")
t.test(Petal.Width ~ Species, data = iris2, var.equal = TRUE)
xaringan::infinite_moon_reader()
set.seed(123)
N <- 10^5
poblacion <- rexp(N, rate = 1/10)  # media poblacional ~10, asimétrica
# Muestras y medias
n <- 30
B <- 4000
medias <- replicate(B, mean(sample(poblacion, n, replace = TRUE)))
library(ggplot2)
df <- data.frame(medias = medias)
# Parámetros teóricos para overlay normal por TLC
mu <- mean(poblacion)
sigma <- sd(poblacion)
se <- sigma / sqrt(n)
ggplot(df, aes(medias)) +
geom_density() +
stat_function(fun = function(x) dnorm(x, mean = mu, sd = se),
linewidth = 1) +
labs(title = "Distribución de la media muestral vs Normal (TLC)",
subtitle = paste0("n = ", n, "  ·  B = ", B,
"  ·  Overlay: N(mu, sigma/sqrt(n))"),
x = "Medias muestrales", y = "Densidad")
library(ggplot2)
tcrit <- qt(0.975, df)
options(scipen = 999)
t.test(Petal.Width ~ Species, data = iris2, var.equal = TRUE)
t.test(Petal.Width ~ Species, data = iris2, var.equal = TRUE) %>%
cat()
t.test(Petal.Width ~ Species, data = iris2, var.equal = TRUE)
t.test(Petal.Width ~ Species, data = iris2)
t.test(Petal.Width ~ Species, data = iris2) %>% as.character()
t.test(Petal.Width ~ Species, data = iris2)
t.test(Petal.Width ~ Species, data = iris2)
t.test(Petal.Width ~ Species, data = iris2)
xaringan::infinite_moon_reader()
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
set.seed(123)
x <- rnorm(50)
datos <- data.frame(
x = rep(x,3),
y = c(x + rnorm(50,0,0.3),   # positiva
-x + rnorm(50,0,0.3),  # negativa
rnorm(50)),            # sin correlación
tipo = rep(c("Positiva (r ≈ 0.9)", "Negativa (r ≈ -0.9)", "Sin correlación (r ≈ 0)"), each=50)
)
ggplot(datos, aes(x=x, y=y)) +
geom_point(color="steelblue") +
geom_smooth(method="lm", se=FALSE, color="red") +
facet_wrap(~tipo) +
theme_minimal()
library(ggplot2)
set.seed(123)
x <- rnorm(50)
datos <- data.frame(
x = rep(x,3),
y = c(x + rnorm(50,0,0.3),   # positiva
-x + rnorm(50,0,0.3),  # negativa
rnorm(50)),            # sin correlación
tipo = rep(c("Positiva (r ≈ 0.9)", "Negativa (r ≈ -0.9)", "Sin correlación (r ≈ 0)"), each=50)
)
ggplot(datos, aes(x=x, y=y)) +
geom_point(color="steelblue") +
geom_smooth(method="lm", se=FALSE, color="red") +
facet_wrap(~tipo) +
theme_minimal()
set.seed(123)
x <- rnorm(30, mean=50, sd=10)
y <- 2*x + rnorm(30, mean=0, sd=15)
# Cálculo de Pearson
cor.test(x, y, method="pearson")
library(ggplot2)
set.seed(2624)
x <- rnorm(50)
datos <- data.frame(
x = rep(x,3),
y = c(x + rnorm(50,0,0.3),   # positiva
-x + rnorm(50,0,0.3),  # negativa
rnorm(50)),            # sin correlación
tipo = rep(c("Positiva (r ≈ 0.9)", "Negativa (r ≈ -0.9)", "Sin correlación (r ≈ 0)"), each=50)
)
ggplot(datos, aes(x=x, y=y)) +
geom_point(color="steelblue") +
geom_smooth(method="lm", se=FALSE, color="red") +
facet_wrap(~tipo) +
theme_minimal()
set.seed(123)
x <- rnorm(30, mean=50, sd=10)
y <- 2*x + rnorm(30, mean=0, sd=15)
# Cálculo de Pearson
cor.test(x, y, method="pearson")
# Visualización
df <- data.frame(x, y)
ggplot(df, aes(x=x, y=y)) +
geom_point(color="darkblue", size=2) +
geom_smooth(method="lm", se=FALSE, color="red") +
labs(title="Ejemplo: Correlación positiva fuerte (r ≈ 0.84)",
x="Variable X", y="Variable Y") +
theme_minimal()
# Visualización
df <- data.frame(x, y)
# Visualización
df <- data.frame(x, y)
ggplot(df, aes(x=x, y=y)) +
geom_point(color="darkblue", size=2) +
geom_smooth(method="lm", se=FALSE, color="red") +
labs(title="Ejemplo: Correlación positiva fuerte (r ≈ 0.84)",
x="Variable X", y="Variable Y") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
mtricula_panel %>% select(asistencia_2m,asistencia_4b) %>% na.omit() %>% cor()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(readr,dplyr,readxl)
#   library(readxl)
# simce2m2022 <- read_excel("input/simce/simce2m2022.xlsx")
#   simce2m2022 %>%  haven::write_dta("input/simce/simce2m2022.dta")
#
#
#   library(readxl)
# simce2m2023 <- read_excel("input/simce/simce2m2023.xlsx")
#   simce2m2023 %>%  haven::write_dta("input/simce/simce2m2023.dta")
lista_anio =  c(2021:2023)
for (anio_for in lista_anio) {
# Cargar año de entrada
matricula_primero<- read_delim(paste0("input/matricula/matricula_",anio_for,".CSV"),
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(matricula_primero) =  names( matricula_primero)  %>% tolower()
matricula_primero =
matricula_primero %>%
filter(cod_grado2 == 1 & (
cod_ense3 == 4 |
cod_ense3 == 6 )
) %>%
select(mrun, rbd_primero = rbd, cod_depe2_primero =cod_depe2,
gen_alu, edad_alu_primero=edad_alu, rural_rbd_primero = rural_rbd)
# Cargar año anterior
matricula_cero<- read_delim(paste0("input/matricula/matricula_",anio_for-1,".CSV"),
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(matricula_cero) =  names( matricula_cero)  %>% tolower()
lista_rbd_solobasica= matricula_cero %>%
group_by(rbd, cod_ense3) %>%
summarise(n = n(), .groups = "drop") %>%
tidyr::complete(rbd, cod_ense3 = 1:7, fill = list(n = 0)) %>%
mutate(cod_ense3 = paste0("A",cod_ense3)) %>%
tidyr::pivot_wider(names_from = cod_ense3,values_from = n) %>%
filter(
A2 >0 & (A4 == 0  & A6 == 0)
) %>% select(rbd)
matricula_cero =
matricula_cero %>%
filter(cod_grado2 == 8 & cod_ense3 == 2 ) %>%
select(mrun,rbd_pre = rbd, cod_com_rbd,cod_reg_rbd, cod_depe2_oct=cod_depe2   )
# Cargar año siguiente
matricula_segundo<- read_delim(paste0("input/matricula/matricula_",anio_for+1,".CSV"),
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(matricula_segundo) =  names( matricula_segundo)  %>% tolower()
matricula_segundo =
matricula_segundo %>%
filter(cod_grado2 == 2 & (
cod_ense3 == 4 |
cod_ense3 == 6 )
) %>%
select(mrun, rbd_pos = rbd)
# Juntar bbdd
matricula_panel_aux = matricula_cero %>%
filter(rbd_pre %in% lista_rbd_solobasica$rbd) %>%
left_join(matricula_primero ,  by = "mrun") %>%
left_join(matricula_segundo ,  by = "mrun")
matricula_panel_aux$anio_simce= anio_for + 1
# simce
simce2m <- haven::read_dta(paste0("input/simce/simce2m",anio_for +1 , ".dta"))
simce2m = simce2m %>% select(mrun, idalumno, rbd_simce  = rbd, ptje_mate2m_alu , ptje_lect2m_alu ) %>%
mutate( idalumno =  paste0(idalumno,anio_for+1),
ptje_mate2m_alu = scale(ptje_mate2m_alu %>% as.numeric()) ,
ptje_lect2m_alu =  scale(ptje_lect2m_alu %>% as.numeric())
)
## nse simce
matricula_panel_aux = matricula_panel_aux %>% left_join(simce2m,
by =c("mrun"))
assign(paste0("mtricula_panel_",anio_for + 1) , value = matricula_panel_aux
)
}
mtricula_panel  = rbind(mtricula_panel_2022, mtricula_panel_2023, mtricula_panel_2024)
rm(list = setdiff(ls(), "mtricula_panel"))
mtricula_panel =  mtricula_panel %>%
filter(rbd_primero == rbd_pos &
rbd_pre != rbd_primero) %>%
na.omit()
mtricula_panel  =  mtricula_panel %>%
mutate(
ptje_mate2m_alu = ptje_mate2m_alu %>% as.numeric(),
ptje_lect2m_alu = ptje_lect2m_alu %>% as.numeric(),
)
mtricula_panel$anio_simce %>% table()
library(readxl)
simce2m2024 <- read_excel("input/simce/simce2m2024.xlsx")
simce2m2024$ptje_lect2m_alu %>% summary()
#  Los simce 2022, 2023, 2024 de 2m requiere los 4b de 16 17  18
lista_anio = c(2016,2017,2018)
library(haven)
for (anio_for in lista_anio) {
# Cargar año de entrada
simce4b = simce4b2016_alu_publica_final <-
read_dta(paste0(
"input/simce/4b/simce4b",anio_for,"_alu_publica_final.dta")
) %>% select(
grado,
mrun,
ptje_mate4b_alu,
ptje_lect4b_alu) %>%
mutate(anio_simce4b =anio_for,
ptje_mate4b_alu =  scale(ptje_mate4b_alu %>% as.numeric) ,
ptje_lect4b_alu =  scale(ptje_lect4b_alu %>% as.numeric)
)
assign(paste0("simce4b","_",anio_for), simce4b)
}
simce4b = rbind(simce4b_2016,simce4b_2017,simce4b_2018)
mtricula_panel = mtricula_panel %>%  left_join(simce4b, by=c("mrun"))
mtricula_panel %>% select(contains("ptje"))
mtricula_panel %>% na.omit() %>% group_by(
anio_simce
) %>% summarise(mean(ptje_mate2m_alu),
mean(ptje_mate2m_alu))
library(haven)
panel_2m_padres_01_24 <- read_dta("input/simce/panel_2m_padres_01_24.dta")
panel_2m_padres_01_24  = panel_2m_padres_01_24 %>%
mutate(idalumno = paste0(idalumno, year)) %>%
select(idalumno,  ingreso_noajus , educ_continua_pa , educ_continua_ma)
# Juntar con panel del estudio
mtricula_panel  = mtricula_panel %>% left_join(panel_2m_padres_01_24 ,  by   ="idalumno")
library(readr)
# 2022
rendimiento_2022 <- read_delim("input/rendimiento/rendimiento_2022.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2022) =  names(rendimiento_2022) %>% tolower()
rendimiento_2022 =  rendimiento_2022 %>% select(mrun,anio_simce  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2022 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2022 = rendimiento_2022 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
# 2023
rendimiento_2023 <- read_delim("input/rendimiento/rendimiento_2023.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2023) =  names(rendimiento_2023) %>% tolower()
rendimiento_2023 =  rendimiento_2023 %>% select(mrun,anio_simce  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2023 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2023 = rendimiento_2023 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
# 2024
rendimiento_2024 <- read_delim("input/rendimiento/rendimiento_2024.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2024) =  names(rendimiento_2024) %>% tolower()
rendimiento_2024 =  rendimiento_2024 %>% select(mrun,anio_simce  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2024 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2024 = rendimiento_2024 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
#  JUNTAR ######################
rendimiento =  rbind(rendimiento_2022,rendimiento_2023,rendimiento_2024)
#
mtricula_panel   = mtricula_panel  %>%
left_join(rendimiento , by = c("mrun","anio_simce"))
library(readr)
# 2016
rendimiento_2016 <- read_delim("input/rendimiento/rendimiento_2016.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2016) =  names(rendimiento_2016) %>% tolower()
rendimiento_2016 =  rendimiento_2016 %>% select(mrun,anio_simce4b  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2016 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2016 = rendimiento_2016 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
# 2017
rendimiento_2017 <- read_delim("input/rendimiento/rendimiento_2017.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2017) =  names(rendimiento_2017) %>% tolower()
rendimiento_2017 =  rendimiento_2017 %>% select(mrun,anio_simce4b  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2017 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2017 = rendimiento_2017 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
# 2018
rendimiento_2018 <- read_delim("input/rendimiento/rendimiento_2018.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
names(rendimiento_2018) =  names(rendimiento_2018) %>% tolower()
rendimiento_2018 =  rendimiento_2018 %>% select(mrun,anio_simce4b  = agno,cod_grado,prom_gral,asistencia,sit_fin_r)
# rendimiento_2018 %>% group_by(mrun) %>% mutate(n=n()) %>% filter(n>1) %>%
#   arrange(-mrun) # los niños se duplican si fueron trasladados
rendimiento_2018 = rendimiento_2018 %>% filter(sit_fin_r!="T") %>% filter(!duplicated(mrun))
# #######################
rendimiento =  rbind(rendimiento_2016,rendimiento_2017,rendimiento_2018)
#
mtricula_panel   = mtricula_panel  %>%
left_join(rendimiento , by = c("mrun","anio_simce4b"), suffix = c("_2m","_4b") )
mat_cor_educ = mtricula_panel %>% select(asistencia_2m,asistencia_4b,ptje_mate2m_alu,ptje_lect4b_alu,ptje_mate2m_alu,ptje_lect4b_alu) %>% na.omit() %>% cor()
save(mat_cor_educ, file="mat_cor_educ.RData")
load("C:/Users/franciscom/Desktop/Proyectos/Catedras/Catedra Cuanti II Uchile/Cuarta clase/mat_cor_educ.RData")
library(ggplot2)
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
load("mat_cor_educ.RData")
library("PerformanceAnalytics")
chart.Correlation(my_data, histogram=TRUE, pch=19)
chart.Correlation(mat_cor_educ, histogram=TRUE, pch=19)
mat_cor_educ
chart.Correlation(mat_cor_educ, histogram=TRUE, pch=19)
mat_cor_educ = mtricula_panel %>% select(asistencia_2m,asistencia_4b,ptje_mate2m_alu,ptje_lect4b_alu,ptje_mate2m_alu,ptje_lect4b_alu) %>% na.omit()
save(mat_cor_educ, file="mat_cor_educ.RData")
load("mat_cor_educ.RData")
chart.Correlation(mat_cor_educ, histogram=TRUE, pch=19)
mat_cor_educ
set.seed(123)
muestra <- mat_cor_educ %>% sample_n(100)
chart.Correlation(mat_cor_educ, histogram=TRUE, pch=19)
chart.Correlation(muestra, histogram=TRUE, pch=19)
muestra <- mat_cor_educ %>% filter(asistencia_2m>70 & asistencia_2m>70) %>% sample_n(100)
chart.Correlation(muestra, histogram=TRUE, pch=19)
mat_cor_educ = mtricula_panel %>% select(asistencia_2m,asistencia_4b,ptje_mate4b_alu,ptje_lect4b_alu,ptje_mate2m_alu,ptje_lect2b_alu) %>% na.omit()
save(mat_cor_educ, file="mat_cor_educ.RData")
mat_cor_educ = mtricula_panel %>% select(asistencia_2m,asistencia_4b,ptje_mate4b_alu,ptje_lect4b_alu,ptje_mate2m_alu,ptje_lect4b_alu) %>% na.omit()
save(mat_cor_educ, file="mat_cor_educ.RData")
save(mat_cor_educ, file="mat_cor_educ.RData")
load("mat_cor_educ.RData")
library("PerformanceAnalytics")
set.seed(123)
muestra <- mat_cor_educ %>% filter(asistencia_2m>70 & asistencia_2m>70) %>% sample_n(100)
chart.Correlation(muestra, histogram=TRUE, pch=19)
mat_cor_educ = mtricula_panel %>% select(asistencia_2m,asistencia_4b,ptje_mate4b_alu,ptje_lect4b_alu,ptje_mate2m_alu,ptje_lect2m_alu) %>% na.omit()
save(mat_cor_educ, file="mat_cor_educ.RData")
save(mat_cor_educ, file="mat_cor_educ.RData")
load("mat_cor_educ.RData")
library("PerformanceAnalytics")
set.seed(123)
muestra <- mat_cor_educ %>% filter(asistencia_2m>70 & asistencia_2m>70) %>% sample_n(100)
chart.Correlation(muestra, histogram=TRUE, pch=19)
# Visualización
df <- data.frame(x, y)
set.seed(123)
x <- rnorm(30, mean=50, sd=10)
y <- 2*x + rnorm(30, mean=0, sd=15)
# Visualización
df <- data.frame(x, y)
sjPlot::plot_scatter(df$x,df$y)
sjPlot::plot_scatter(df$x,df$y)
sjPlot::plot_scatter(df,x,y)
sjPlot::plot_scatter(df,x,y, line="lm")
sjPlot::plot_scatter(df,x,y, fit.line="lm")
